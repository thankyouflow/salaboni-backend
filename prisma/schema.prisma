// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id        Int      @id @default(autoincrement())
  nickname String
  firstName String
  lastName  String?
  username  String   @unique
  email     String   @unique
  phoneNumber     Int
  password  String
  comments  Comment[]
  entX  String
  entY  String
  post     Post[]
  postComment     PostComment[]
  stay      Int?
  adderss     Address    @relation(fields: [adderssId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adderssId   Int
  certification  Boolean  @default(false)
  rooms     Room[]
  Message   Message[]
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  addersses   Address[]
  posts     Post[]
  users      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        Int      @id @default(autoincrement())
  entX  String
  entY  String
  comments  Comment[]
  users  User[]
  img       String?
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId   Int
  star      Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  adderss     Address    @relation(fields: [adderssId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adderssId   Int
  check   Int  @default(0) //1 삭제 2 신고
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  caption   String
  content   String
  postComments PostComment[]
  check   Int  @default(0) //1 삭제 2 신고
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PostComment {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  post     Post    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   Int
  check   Int  @default(0) //1 삭제 2 신고
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        Int       @id @default(autoincrement())
  users     User[]
  messages   Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  type      Int //0 text 1 img
  payload   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}